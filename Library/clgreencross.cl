/* ------------------------------------------------------------
 * This is the file "clgreencross.cl" of this master thesis.
 * All rights reserved, Bennet Carstensen 2017
 * ------------------------------------------------------------ */

/**
 * @file      cl/clgreencross.cl
 * @author    Bennet Carstensen
 * @date      2017
 * @copyright All rights reserved, Bennet Carstensen 2017
 */

#ifndef CLGREENCROSS_CL
#define CLGREENCROSS_CL

/** @addtogroup greencross
 *  @{ */

/*  @brief The source code to performe operations on the module
 *         @ref greencross via OpenCL as a string. */
static const char clgreencross_src[] =
{
  "#ifndef GREENCROSS_CL\n"
  "#define GREENCROSS_CL\n"
  "\n"
  "\n"
  "#ifdef USE_FLOAT\n"
  "typedef float8  real8;\n"
  "typedef float16 real16;\n"
  "#else\n"
  "typedef double8  real8;\n"
  "typedef double16 real16;\n"
  "#endif\n"
  "\n"
  "kernel void\n"
  "fastaddeval_h2matrix_avector_0(         const uint dim,\n"
  "                                        const uint n,\n"
  "                               global   const real *vs,\n"
  "                               global   const uint *p,\n"
  "                               global   const real *g,\n"
  "                                        const uint nq,\n"
  "                               global   const real *xqs,\n"
  "                               global   const real *yqs,\n"
  "                               global   const real *wqs,\n"
  "                               global   const real *bases,\n"
  "                                        const uint nq_min_vert,\n"
  "                               constant       real *xqs_min_vert,\n"
  "                               constant       real *yqs_min_vert,\n"
  "                               constant       real *wqs_min_vert,\n"
  "                               global   const real *bases_min_vert,\n"
  "                                        const uint num_row_leafs,\n"
  "                               global   const uint *rows_this_device,\n"
  "                               global   const uint *num_h2_leafs_per_cluster,\n"
  "                               global   const uint *idx_offs,\n"
  "                               global   const uint *ridx_sizes,\n"
  "                               global   const uint *cidx_sizes,\n"
  "                               global   const uint *ridx_offs,\n"
  "                               global   const uint *cidx_offs,\n"
  "                               global   const uint *ridxs,\n"
  "                               global   const uint *cidxs,\n"
  "                               global   const uint *xt_offs,\n"
  "                               global   const uint *yt_offs,\n"
  "                                        const uint num_nf_writing_clusters,\n"
  "                               global   const uint *nf_writings_this_device,\n"
  "                               global   const uint *num_nf_h2_leafs_per_cluster,\n"
  "                               global   const uint *nf_idx_offs,\n"
  "                               global   const uint *nf_ridx_sizes,\n"
  "                               global   const uint *nf_cidx_sizes,\n"
  "                               global   const uint *nf_ridx_offs,\n"
  "                               global   const uint *nf_cidx_offs,\n"
  "                               global   const uint *nf_ridxs,\n"
  "                               global   const uint *nf_cidxs,\n"
  "                               global   const uint *nf_xt_offs,\n"
  "                               global   const uint *nf_yt_offs,\n"
  "                               global   const uint *num_min_vert,\n"
  "                               global   const uint *idx_off_min_vert,\n"
  "                               global   const uint *rows_min_vert,\n"
  "                               global   const uint *cols_min_vert,\n"
  "                               global   const uint *cidx_min_vert,\n"
  "                                        const real bem_alpha,\n"
  "                                        const real alpha,\n"
  "                               global   const real *xts,\n"
  "                               global         real *yt)\n"
  "{\n"
  "  const size_t grpid0 = get_group_id(0);\n"
  "\n"
  "  if((grpid0 >= num_row_leafs) && (grpid0 >= num_nf_writing_clusters))\n"
  "    return;\n"
  "  else\n"
  "  {\n"
  "    const size_t lid0          = get_local_id(0);\n"
  "\n"
  "    const real   kernel_factor = r_four_pi;\n"
  "\n"
  "    uint   row_this_group      = rows_this_device[grpid0];\n"
  "\n"
  "    uint   num_h2_leafs        = num_h2_leafs_per_cluster[row_this_group];\n"
  "\n"
  "    gcidxinfo gcii;\n"
  "    geom      sur;\n"
  "    singquadg sq;\n"
  "\n"
  "    // local real3 vl[SIZE][3];\n"
  "    // local uint3 pl[SIZE];\n"
  "    // local real  gl[SIZE];\n"
  "\n"
  "    // local real xql[8 * QUADRATUR_ORDER];\n"
  "    // local real yql[8 * QUADRATUR_ORDER];\n"
  "    // local real wql[4 * QUADRATUR_ORDER];\n"
  "\n"
  "    local real ytl[SIZE + 1];\n"
  "\n"
  "    // event_t events[3];\n"
  "    //\n"
  "    // events[0] = async_work_group_copy(xql, xqs, 8 * QUADRATUR_ORDER, 0);\n"
  "    // events[1] = async_work_group_copy(yql, yqs, 8 * QUADRATUR_ORDER, 0);\n"
  "    // events[2] = async_work_group_copy(wql, wqs, 4 * QUADRATUR_ORDER, 0);\n"
  "\n"
  "    init_geom(&sur, dim, n, vs, p, g, 0, 0, 0);\n"
  "    init_singquadg(&sq, dim, nq, xqs, yqs, wqs, bases, 0, 0, 0);\n"
  "\n"
  "    if(grpid0 < num_row_leafs)\n"
  "    {\n"
  "      /* Same H2-matrix farfield information for all threads in a work group */\n"
  "      init_row_gcidxinfo(&gcii,\n"
  "                         num_h2_leafs,\n"
  "                         idx_offs[row_this_group],\n"
  "                         ridx_sizes[row_this_group],\n"
  "                         ridx_offs[row_this_group],\n"
  "                         ridxs,\n"
  "                         yt_offs[row_this_group],\n"
  "                         yt,\n"
  "                         0);\n"
  "\n"
  "      /* Different farfield H2-matrix information for all threads in a work group */\n"
  "      if(lid0 < gcii.num_h2_leafs)\n"
  "        set_column_info_gcidxinfo(&gcii,\n"
  "                                  cidx_sizes[gcii.idx_off + lid0],\n"
  "                                  cidx_offs[gcii.idx_off + lid0],\n"
  "                                  cidxs,\n"
  "                                  xt_offs[gcii.idx_off + lid0],\n"
  "                                  xts);\n"
  "\n"
  "      fastaddeval_farfield(&gcii, &sur, &sq, bem_alpha, kernel_factor, alpha);\n"
  "      //mvm_on_the_fly_gca(&gcii, &sur, &sq, bem_alpha, kernel_factor, alpha);\n"
  "    }\n"
  "\n"
  "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
  "\n"
  "    /* Comput the first quadrature points for all nearfield matrices, e.g.,\n"
  "     * distant polygons have the smallest number of quadrature points (say \"n\")\n"
  "     * thus we compute the first n quadrature points for all entries, e.g. those\n"
  "     * with 0 to 3 identical vertices in the row and column polygon. */\n"
  "\n"
  "    if(grpid0 >= num_nf_writing_clusters)\n"
  "      return;\n"
  "\n"
  "    row_this_group = nf_writings_this_device[grpid0];\n"
  "\n"
  "    num_h2_leafs   = num_nf_h2_leafs_per_cluster[row_this_group];\n"
  "\n"
  "    /* Same H2-matrix nearfield information for all threads in a work group. */\n"
  "    init_row_gcidxinfo(&gcii,\n"
  "                       num_h2_leafs,\n"
  "                       nf_idx_offs[row_this_group],\n"
  "                       nf_ridx_sizes[row_this_group],\n"
  "                       nf_ridx_offs[row_this_group],\n"
  "                       nf_ridxs,\n"
  "                       nf_yt_offs[row_this_group],\n"
  "                       yt,\n"
  "                       ytl);\n"
  "\n"
  "    if(lid0 < gcii.num_h2_leafs)\n"
  "    {\n"
  "      /* Different nearfield H2-matrix information for all threads in a work\n"
  "       * group. */\n"
  "      set_column_info_gcidxinfo(&gcii,\n"
  "                                nf_cidx_sizes[gcii.idx_off + lid0],\n"
  "                                nf_cidx_offs[gcii.idx_off + lid0],\n"
  "                                nf_cidxs,\n"
  "                                nf_xt_offs[gcii.idx_off + lid0],\n"
  "                                xts);\n"
  "\n"
  "      mvm_on_the_fly_gca(&gcii, &sur, &sq, bem_alpha, kernel_factor, alpha);\n"
  "    }\n"
  "\n"
  "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
  "\n"
  "    intinfo   iinfo;\n"
  "    singquadc sq_min_vert;\n"
  "\n"
  "    init_intinfo(&iinfo,\n"
  "                 num_min_vert[row_this_group],\n"
  "                 idx_off_min_vert[row_this_group],\n"
  "                 rows_min_vert,\n"
  "                 cols_min_vert,\n"
  "                 cidx_min_vert);\n"
  "\n"
  "    init_singquadc_min_vert(&sq_min_vert,\n"
  "                            dim,\n"
  "                            nq_min_vert,\n"
  "                            xqs_min_vert,\n"
  "                            yqs_min_vert,\n"
  "                            wqs_min_vert,\n"
  "                            bases_min_vert);\n"
  "\n"
  "    // eval_integrals(&gcii,\n"
  "    //                &iinfo,\n"
  "    //                &sur,\n"
  "    //                &sq_min_vert,\n"
  "    //                bem_alpha,\n"
  "    //                kernel_factor,\n"
  "    //                alpha,\n"
  "    //                xts);\n"
  "  }\n"
  "}\n"
  "\n"
  "kernel void\n"
  "fastaddeval_nf_common(         const uint dim,\n"
  "                               const uint n,\n"
  "                      global   const real *vs,\n"
  "                      global   const uint *p,\n"
  "                      global   const real *g)\n"
  "{\n"
  "\n"
  "}\n"
  "\n"
  "kernel void\n"
  "fastaddeval_nf_min_vert(         const uint dim,\n"
  "                                 const uint n,\n"
  "                        global   const real *vs,\n"
  "                        global   const uint *p,\n"
  "                        global   const real *g,\n"
  "                                 const uint nq_min_vert,\n"
  "                        constant       real *xqs_min_vert,\n"
  "                        constant       real *yqs_min_vert,\n"
  "                        constant       real *wqs_min_vert,\n"
  "                        global   const real *bases_min_vert,\n"
  "                                 const uint num_nf_writing_clusters,\n"
  "                        global   const uint *nf_writings_this_device,\n"
  "                        global   const uint *num_nf_h2_leafs_per_cluster,\n"
  "                        global   const uint *nf_idx_offs,\n"
  "                        global   const uint *nf_ridx_sizes,\n"
  "                        global   const uint *nf_cidx_sizes,\n"
  "                        global   const uint *nf_ridx_offs,\n"
  "                        global   const uint *nf_cidx_offs,\n"
  "                        global   const uint *nf_ridxs,\n"
  "                        global   const uint *nf_cidxs,\n"
  "                        global   const uint *nf_xt_offs,\n"
  "                        global   const uint *nf_yt_offs,\n"
  "                        global   const uint *num_min_vert,\n"
  "                        global   const uint *idx_off_min_vert,\n"
  "                        global   const uint *rows_min_vert,\n"
  "                        global   const uint *cols_min_vert,\n"
  "                        global   const uint *cidx_min_vert,\n"
  "                                 const real bem_alpha,\n"
  "                                 const real alpha,\n"
  "                        global   const real *xt,\n"
  "                        global         real *yt)\n"
  "{\n"
  "  const size_t grpid0 = get_group_id(0);\n"
  "\n"
  "  if(grpid0 >= num_nf_writing_clusters)\n"
  "    return;\n"
  "  else\n"
  "  {\n"
  "    const real   kernel_factor = r_four_pi;\n"
  "\n"
  "    uint   row_this_group      = nf_writings_this_device[grpid0];\n"
  "\n"
  "    uint   num_h2_leafs        = num_nf_h2_leafs_per_cluster[row_this_group];\n"
  "\n"
  "    gcidxinfo  gcii;\n"
  "    geom       sur;\n"
  "    intinfo    iinfo;\n"
  "    singquadc  sq;\n"
  "\n"
  "    local real ytl[SIZE + 1];\n"
  "\n"
  "    init_row_gcidxinfo(&gcii,\n"
  "                       num_h2_leafs,\n"
  "                       nf_idx_offs[row_this_group],\n"
  "                       nf_ridx_sizes[row_this_group],\n"
  "                       nf_ridx_offs[row_this_group],\n"
  "                       nf_ridxs,\n"
  "                       nf_yt_offs[row_this_group],\n"
  "                       yt,\n"
  "                       ytl);\n"
  "\n"
  "\n"
  "\n"
  "    init_intinfo(&iinfo,\n"
  "                 num_min_vert[row_this_group],\n"
  "                 idx_off_min_vert[row_this_group],\n"
  "                 rows_min_vert,\n"
  "                 cols_min_vert,\n"
  "                 cidx_min_vert);\n"
  "\n"
  "    init_singquadc_min_vert(&sq,\n"
  "                            dim,\n"
  "                            nq_min_vert,\n"
  "                            xqs_min_vert,\n"
  "                            yqs_min_vert,\n"
  "                            wqs_min_vert,\n"
  "                            bases_min_vert);\n"
  "\n"
  "    init_geom(&sur, dim, n, vs, p, g, 0, 0, 0);\n"
  "\n"
  "    eval_integrals(&gcii,\n"
  "                   &iinfo,\n"
  "                   &sur,\n"
  "                   &sq,\n"
  "                   bem_alpha,\n"
  "                   kernel_factor,\n"
  "                   alpha,\n"
  "                   xt);\n"
  "  }\n"
  "}\n"
  "\n"
  "kernel void\n"
  "fastaddeval_nf_min_edge(         const uint dim,\n"
  "                                 const uint n,\n"
  "                        global   const real *vs,\n"
  "                        global   const uint *p,\n"
  "                        global   const real *g,\n"
  "                                 const uint nq,\n"
  "                        constant       real *xqs,\n"
  "                        constant       real *yqs,\n"
  "                        constant       real *wqs,\n"
  "                        global   const real *bases,\n"
  "                                 const uint num_nf_writing_clusters,\n"
  "                        global   const uint *nf_writings_this_device,\n"
  "                        global   const uint *num_nf_h2_leafs_per_cluster,\n"
  "                        global   const uint *nf_idx_offs,\n"
  "                        global   const uint *nf_ridx_sizes,\n"
  "                        global   const uint *nf_cidx_sizes,\n"
  "                        global   const uint *nf_ridx_offs,\n"
  "                        global   const uint *nf_cidx_offs,\n"
  "                        global   const uint *nf_ridxs,\n"
  "                        global   const uint *nf_cidxs,\n"
  "                        global   const uint *nf_xt_offs,\n"
  "                        global   const uint *nf_yt_offs,\n"
  "                        global   const uint *num_min_vert,\n"
  "                        global   const uint *idx_off_min_vert,\n"
  "                        global   const uint *rows_min_vert,\n"
  "                        global   const uint *cols_min_vert,\n"
  "                        global   const uint *cidx_min_vert,\n"
  "                                 const real bem_alpha,\n"
  "                                 const real alpha,\n"
  "                        global   const real *xt,\n"
  "                        global         real *yt)\n"
  "{\n"
  "  const size_t grpid0 = get_group_id(0);\n"
  "\n"
  "  if(grpid0 >= num_nf_writing_clusters)\n"
  "    return;\n"
  "  else\n"
  "  {\n"
  "    const real   kernel_factor = r_four_pi;\n"
  "\n"
  "    uint   row_this_group      = nf_writings_this_device[grpid0];\n"
  "\n"
  "    uint   num_h2_leafs        = num_nf_h2_leafs_per_cluster[row_this_group];\n"
  "\n"
  "    gcidxinfo  gcii;\n"
  "    geom       sur;\n"
  "    intinfo    iinfo;\n"
  "    singquadc  sq;\n"
  "\n"
  "    local real ytl[SIZE + 1];\n"
  "\n"
  "    init_row_gcidxinfo(&gcii,\n"
  "                       num_h2_leafs,\n"
  "                       nf_idx_offs[row_this_group],\n"
  "                       nf_ridx_sizes[row_this_group],\n"
  "                       nf_ridx_offs[row_this_group],\n"
  "                       nf_ridxs,\n"
  "                       nf_yt_offs[row_this_group],\n"
  "                       yt,\n"
  "                       ytl);\n"
  "\n"
  "\n"
  "\n"
  "    init_intinfo(&iinfo,\n"
  "                 num_min_vert[row_this_group],\n"
  "                 idx_off_min_vert[row_this_group],\n"
  "                 rows_min_vert,\n"
  "                 cols_min_vert,\n"
  "                 cidx_min_vert);\n"
  "\n"
  "    init_singquadc_min_edge(&sq,\n"
  "                            dim,\n"
  "                            nq,\n"
  "                            xqs,\n"
  "                            yqs,\n"
  "                            wqs,\n"
  "                            bases);\n"
  "\n"
  "    init_geom(&sur, dim, n, vs, p, g, 0, 0, 0);\n"
  "\n"
  "    eval_integrals(&gcii,\n"
  "                   &iinfo,\n"
  "                   &sur,\n"
  "                   &sq,\n"
  "                   bem_alpha,\n"
  "                   kernel_factor,\n"
  "                   alpha,\n"
  "                   xt);\n"
  "  }\n"
  "}\n"
  "\n"
  "#endif // GREENCROSS_CL\n"
};

/** @} */

#endif // CLGREENCROSS_CL