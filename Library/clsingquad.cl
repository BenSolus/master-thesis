/* ------------------------------------------------------------
 * This is the file "clsingquad.cl" of this master thesis.
 * All rights reserved, Steffen Boerm 2009
 * ------------------------------------------------------------ */

/**
 * @file      cl/clsingquad.cl
 * @author    Bennet Carstensen
 * @date      2017
 * @copyright All rights reserved, Bennet Carstensen 2017
 */

#ifndef CLSINGQUAD_CL
#define CLSINGQUAD_CL

/** @addtogroup singquad
 *  @{ */

/*  @brief The source code to performe operations on the module
 *         @ref singquad via OpenCL as a string. */
static const char clsingquad_src[] =
{
  "\n"
  "#ifdef USE_FLOAT\n"
  "typedef float4  real4;\n"
  "#else\n"
  "typedef double4  real4;\n"
  "#endif\n"
  "\n"
  "// /** @brief @ref quadc is just an abbreviation for the struct @ref _quadc. */\n"
  "// typedef struct _quadc quadc;\n"
  "//\n"
  "// /** @brief Pointer to a @ref _quadc \"quadc\" object. */\n"
  "// typedef quadc *pquadc;\n"
  "//\n"
  "// /** @brief Pointer to a constant @ref _quadc \"quadc\" object. */\n"
  "// typedef const quadc *pcquadc;\n"
  "\n"
  "typedef struct _singquadg singquadg;\n"
  "\n"
  "typedef singquadg *psingquadg;\n"
  "\n"
  "typedef const singquadg *pcsingquadg;\n"
  "\n"
  "// struct _quadc\n"
  "// {\n"
  "//            uint nq;\n"
  "//\n"
  "//   constant real *qx;\n"
  "//\n"
  "//   constant real *qy;\n"
  "//\n"
  "//   constant real *w;\n"
  "// };\n"
  "\n"
  "struct _singquadg\n"
  "{\n"
  "  uint nq;\n"
  "\n"
  "  global const real *xqs;\n"
  "  global const real *yqs;\n"
  "  global const real *wqs;\n"
  "\n"
  "  real4 bases;\n"
  "};\n"
  "\n"
  "// void\n"
  "// init_quadc(              pquadc q,\n"
  "//                    const uint   nq,\n"
  "//            constant      real   *qx,\n"
  "//            constant      real   *qy,\n"
  "//            constant      real   *w)\n"
  "// {\n"
  "//   q->nq = nq;\n"
  "//   q->qx = qx;\n"
  "//   q->qy = qy;\n"
  "//   q->w  = w;\n"
  "// }\n"
  "\n"
  "void\n"
  "init_singquadg(             psingquadg sq,\n"
  "                      const uint       dim,\n"
  "                      const uint       nq,\n"
  "               global const real       *xqs,\n"
  "               global const real       *yqs,\n"
  "               global const real       *wqs,\n"
  "               global const real       *bases)\n"
  "{\n"
  "  sq->nq        = nq;\n"
  "\n"
  "  sq->xqs       = xqs;\n"
  "  sq->yqs       = yqs;\n"
  "  sq->wqs       = wqs;\n"
  "\n"
  "  sq->bases     = vload4(0, bases);\n"
  "}\n"
  "\n"
  "uint\n"
  "select_quadratureg(              psingquadg sq,\n"
  "                   private const uint3      x,\n"
  "                   private const uint3      y,\n"
  "                   private       uint       *xp,\n"
  "                   private       uint       *yp,\n"
  "                   global  const real       **xq,\n"
  "                   global  const real       **yq,\n"
  "                   global  const real       **wq,\n"
  "                   private       real       *base)\n"
  "{\n"
  "  uint p = (x.x == y.x) + (x.x == y.y) + (x.x == y.z) +\n"
  "           (x.y == y.x) + (x.y == y.y) + (x.y == y.z) +\n"
  "           (x.z == y.x) + (x.z == y.y) + (x.z == y.z);\n"
  "\n"
  "  xp[0] = 0; xp[1] = 1; xp[2] = 2; yp[0] = 0; yp[1] = 1; yp[2] = 2;\n"
  "\n"
  "  *xq   = sq->xqs + (2 * p * sq->nq);\n"
  "  *yq   = sq->yqs + (2 * p * sq->nq);\n"
  "  *wq   = sq->wqs + (p * sq->nq);\n"
  "  *base = ((private real*) &sq->bases)[p];\n"
  "\n"
  "  p = 0;\n"
  "\n"
  "  for(uint i = 0; i < 3; ++i)\n"
  "  {\n"
  "    for(uint j = 0; j < 3; ++j)\n"
  "    {\n"
  "      if(((private const uint*) &x)[i] == ((private const uint*) &y)[j])\n"
  "      {\n"
  "        xp[p] = i;\n"
  "        yp[p] = j;\n"
  "        ++p;\n"
  "        break;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  // printf(\"%u (%u %u %u) (%u %u %u)\\n\", p, xp[0], xp[1], xp[2], yp[0], yp[1], yp[2]);\n"
  "\n"
  "  uint q = p;\n"
  "\n"
  "  for(uint i = 0; i < 3; ++i)\n"
  "  {\n"
  "    uint j = 0;\n"
  "\n"
  "    for(j = 0; (j < q) &&\n"
  "               (((private const uint*) &x)[i] !=\n"
  "                ((private const uint*) &x)[xp[j]]); ++j)\n"
  "      ;\n"
  "\n"
  "    if(j == q)\n"
  "      xp[q++] = i;\n"
  "  }\n"
  "\n"
  "  q = p;\n"
  "\n"
  "  for(uint i = 0; i < 3; ++i)\n"
  "  {\n"
  "    uint j = 0;\n"
  "\n"
  "    for(j = 0; (j < q) &&\n"
  "               (((private const uint*) &y)[i] !=\n"
  "                ((private const uint*) &y)[yp[j]]); ++j)\n"
  "      ;\n"
  "\n"
  "    if(j == q)\n"
  "      yp[q++] = i;\n"
  "  }\n"
  "\n"
  "  return p;\n"
  "}\n"
};

/** @} */

#endif // CLSINGQUAD_CL